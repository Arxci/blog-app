generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id          String    @id @default(cuid())
    slug        String    @unique
    views       Int       @default(0)
    title       String    @db.Text
    description String?   @db.Text
    date        String
    published   Boolean
    banner      String
    body        String    @db.Text
    isFeatured  Boolean
    comments    Comment[]
    likes       Like[]
    dislikes    Dislike[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@map("posts")
}

enum UserRole {
    ADMIN
    USER
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    password      String?
    role          UserRole  @default(USER)
    accounts      Account[]
    comments      Comment[]
    likes         Like[]
    dislikes      Dislike[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    @@map("users")
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
    @@map("accounts")
}

model Comment {
    id     String @id @default(cuid())
    text   String
    postId String
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([postId, userId])
    @@map("comments")
}

model Like {
    id     String @id @default(cuid())
    postId String
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([postId, userId])
    @@map("likes")
}

model Dislike {
    id     String @id @default(cuid())
    postId String
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([postId, userId])
    @@map("dislikes")
}
